# Строку version можно оставить или убрать, если Docker Compose ругается
# version: '3.8'

services:
  backend:
    build: ./backend
    ports:
      - "5001:5000" # Хост:Контейнер
    volumes:
      - ./backend:/app # Для разработки, чтобы изменения кода подхватывались
    # Можно оставить env_file, но значение DATABASE_URL из environment ниже будет иметь приоритет
    env_file:
      - .env
    environment:
      # Ссылки на переменные из .env (кроме DATABASE_URL)
      - FLASK_APP=${FLASK_APP}
      - FLASK_RUN_HOST=${FLASK_RUN_HOST}
      - FLASK_DEBUG=${FLASK_DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      # ЯВНО задаем DATABASE_URL здесь, используя ПРАВИЛЬНЫЙ пароль (например, 'password')
      # Замените 'password' на ваш актуальный пароль, если он другой,
      # но он должен совпадать с MYSQL_PASSWORD в .env файле
      - DATABASE_URL=mysql+mysqlconnector://crm_user:password@db:3306/crm_db
    depends_on:
      - db
    networks:
      - crm_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8080:80" # Хост:Контейнер (Nginx)
    depends_on:
      - backend
    networks:
      - crm_network

  db:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password # Для совместимости со старыми драйверами
    environment:
      # Эти значения по-прежнему берутся из .env файла
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD} # <-- Использует пароль из .env для создания пользователя
    volumes:
      - mysql_data:/var/lib/mysql
      - ./db_init:/docker-entrypoint-initdb.d # Запуск init.sql при первом старте
    ports:
      - "3307:3306" # Опционально: для прямого доступа к БД с хоста
    networks:
      - crm_network

volumes:
  mysql_data:

networks:
  crm_network:
    driver: bridge