{"ast":null,"code":"import axios from'axios';// Создаем инстанс axios\n// baseURL будет автоматически подставляться перед /api/...\n// В Docker окружении Nginx перенаправит /api на бэкенд\nconst apiClient=axios.create({baseURL:'/api',// Используем относительный путь для Nginx proxy\nheaders:{'Content-Type':'application/json'}});// Перехватчик для добавления токена (пример)\napiClient.interceptors.request.use(config=>{const token=localStorage.getItem('authToken');// Получаем токен\nif(token){config.headers.Authorization=\"Bearer \"+token;}return config;},error=>{return Promise.reject(error);});// Функции для работы с API\nexport const getSettings=()=>{return apiClient.get('/settings/');// Запрос на GET /api/settings/\n};export const updateSettings=settingsData=>{// settingsData = { language: 'en', theme: 'dark' }\nreturn apiClient.put('/settings/',settingsData);// Запрос на PUT /api/settings/\n};export default apiClient;","map":{"version":3,"names":["axios","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","getSettings","get","updateSettings","settingsData","put"],"sources":["D:/__work/_______final/new_proj_CRM/test/crm-futures-project/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Создаем инстанс axios\n// baseURL будет автоматически подставляться перед /api/...\n// В Docker окружении Nginx перенаправит /api на бэкенд\nconst apiClient = axios.create({\n  baseURL: '/api', // Используем относительный путь для Nginx proxy\n  headers: {\n    'Content-Type': 'application/json'\n  },\n});\n\n// Перехватчик для добавления токена (пример)\napiClient.interceptors.request.use((config) => {\n  const token = localStorage.getItem('authToken'); // Получаем токен\n  if (token) {\n    config.headers.Authorization = \"Bearer \" + token;\n\n  }\n  return config;\n}, (error) => {\n  return Promise.reject(error);\n});\n\n// Функции для работы с API\nexport const getSettings = () => {\n  return apiClient.get('/settings/'); // Запрос на GET /api/settings/\n};\n\nexport const updateSettings = (settingsData) => {\n  // settingsData = { language: 'en', theme: 'dark' }\n  return apiClient.put('/settings/', settingsData); // Запрос на PUT /api/settings/\n};\n\nexport default apiClient;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA;AACA;AACA,KAAM,CAAAC,SAAS,CAAGD,KAAK,CAACE,MAAM,CAAC,CAC7BC,OAAO,CAAE,MAAM,CAAE;AACjBC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF;AACAH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,EAAK,CAC7C,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAE;AACjD,GAAIF,KAAK,CAAE,CACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,CAAG,SAAS,CAAGH,KAAK,CAElD,CACA,MAAO,CAAAD,MAAM,CACf,CAAC,CAAGK,KAAK,EAAK,CACZ,MAAO,CAAAC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CAAC,CAAC,CAEF;AACA,MAAO,MAAM,CAAAG,WAAW,CAAGA,CAAA,GAAM,CAC/B,MAAO,CAAAf,SAAS,CAACgB,GAAG,CAAC,YAAY,CAAC,CAAE;AACtC,CAAC,CAED,MAAO,MAAM,CAAAC,cAAc,CAAIC,YAAY,EAAK,CAC9C;AACA,MAAO,CAAAlB,SAAS,CAACmB,GAAG,CAAC,YAAY,CAAED,YAAY,CAAC,CAAE;AACpD,CAAC,CAED,cAAe,CAAAlB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}